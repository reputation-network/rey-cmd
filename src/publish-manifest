#!/usr/bin/env node
const REY = require("rey-sdk")
const URL = require("url")
const Personal = require("web3-eth-personal")
const prompt = require("./utils/prompt");
const run = require("./utils/run");

function printHelp() {
  const p = console.log.bind(console)
  p(`Usage: publish-manifest APP_ADDRESS APP_MANIFEST_URL`)
  p(`Establishes the APP_ADDRESS -> APP_MANIFEST_URL mapping and persists it to blockchain.`)
  p(`For this command to work is necessary that APP_ADDRESS has enough funds for invoking the registry smart contract.`)
  p(``)
  p(`Environment variables:`)
  p(`BLOCKCHAIN_NODE_URL        URL of the Ethereum node to connect. Default "http://localhost:8545"`)
  p(`REGISTRY_CONTRACT_ADDRESS  The address where REY registry smart contract is deployed. Default "0x556ED3bEaF6b3dDCb1562d3F30f79bF86fFC05B9"`)
  process.exit(1)
}

async function main() {
  // Entry params
  const appAddress = process.argv[2]
  const appManifestUrl = process.argv[3]
  const nodeUrl = process.env.BLOCKCHAIN_NODE_URL || "http://localhost:8545"
  const registryContractAddress = process.env.REGISTRY_CONTRACT_ADDRESS || "0x556ED3bEaF6b3dDCb1562d3F30f79bF86fFC05B9"

  if (!appAddress || !appManifestUrl) {
    printHelp()
  }

  const personal = new Personal(nodeUrl)
  const registry = new REY.Contract(nodeUrl, registryContractAddress)

  try {
    URL.parse(appManifestUrl);
  } catch (e) {
    throw new Error(`App manifest url value is not a valid url`)
  }

  const prevEntry = await registry.getEntry(appAddress);
  if (prevEntry === appManifestUrl) {
    console.log(`Registry entry for ${appAddress} is already ${appManifestUrl}. Skipping.`);
    return process.exit(0);
  }
  if (prevEntry) {
    console.log(`A registry entry already exists for ${appAddress} with value ${prevEntry}`);
    console.log(`New registry entry value for ${appAddress} will be ${appManifestUrl}`);
    try {
      await prompt.confirmation(`Are you sure you want to overwrite entry for ${appAddress}?`)
    } catch (e) {
      console.log(`Registry entry value was not updated`);
      return process.exit(1);
    }
  }

  let password = await prompt.password(`Password for account ${appAddress}: `)
  await personal.unlockAccount(appAddress, password)
  password = null

  await registry.setEntry(appAddress, appManifestUrl)
  await personal.lockAccount(appAddress)

  const entry = await registry.getEntry(appAddress)
  console.log(`Manifest URL set to ${entry} for ${appAddress}`)
}

run(main);
