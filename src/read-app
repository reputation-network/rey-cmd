#!/usr/bin/env node
const REY = require("rey-sdk");
const Personal = require("web3-eth-personal");
const passwordPrompt = require("./utils/password-prompt");
const run = require("./utils/run");

function printHelp() {
  console.log('Usage: read-app APP_ADDRESS SUBJECT_ADDRESS')
  console.log('Queries the APP with a specific SUBJECT_ADDRESS')
  console.log('For this command to work is necessary that both APP_ADDRESS and SUBJECT_ADDRESS are accounts handled by the blockchain node')
  console.log()
  console.log('Environment variables:')
  console.log('BLOCKCHAIN_NODE_URL        URL of the Ethereum node to connect. Default "http://localhost:8545"')
  console.log('REGISTRY_CONTRACT_ADDRESS  The address where REY registry smart contract is deployed. Default "0x556ED3bEaF6b3dDCb1562d3F30f79bF86fFC05B9"')
  process.exit(1)
}

const personalSignStrategy = (provider, account, password) => async (...data) => {
  const personal = new Personal(provider);
  return personal.sign(REY.Utils.reyHash(data), account, password);
}


async function main() {
  const appAddress = process.argv[2]
  const subjectAddress = process.argv[3]
  const nodeUrl = process.env.BLOCKCHAIN_NODE_URL || "http://localhost:8545"
  const registryAddress = process.env.REGISTRY_CONTRACT_ADDRESS || "0x556ED3bEaF6b3dDCb1562d3F30f79bF86fFC05B9";

  if (!appAddress || !subjectAddress) {
    printHelp()
  }


  const contract = new REY.Contract(nodeUrl, registryAddress)
  const app = new REY.App(appAddress, { contract });
  const password = await passwordPrompt(`Password for account ${subjectAddress}: `, { });
  const signStrategy = personalSignStrategy(nodeUrl, subjectAddress, password);

  const expiration = (Math.floor(Date.now() / 1000) + 3600 * 1).toString(); // 1 hour
  const appParams = await REY.App.buildAppParams({
    version: "1.0",
    request: {
      readPermission: {
        reader: subjectAddress,
        source: appAddress,
        subject: subjectAddress,
        expiration: expiration,
      },
      session: {
        subject: subjectAddress,
        verifier: subjectAddress,
        fee: "0",
        nonce: Date.now().toString(),
      },
      value: "0",
      counter: "1",
    },
    extraReadPermissions: (await app.extraReadPermissions()).map((rp) =>
      Object.assign({ expiration, subject: subject.address }, rp)),
  }, {
    subjectSignStrategy: signStrategy,
    readerSignStrategy: signStrategy,
  });

  const data = await app.query(appParams)

  process.stdout.write(JSON.stringify(data));
};

run(main);
